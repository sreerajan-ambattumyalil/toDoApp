{
  "name": "grunt-electron-installer",
  "version": "0.31.0",
  "description": "Grunt task to generate Windows installers for Electron apps",
  "main": "./tasks/index.js",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/atom/grunt-electron-installer.git"
  },
  "scripts": {
    "prepublish": "grunt clean lint coffee",
    "test": "grunt test"
  },
  "dependencies": {
    "temp": "^0.8.1",
    "underscore": "^1.7.0",
    "asar": "~0.2.1"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-coffeelint": "0.0.13",
    "grunt-contrib-coffee": "^0.11.1",
    "grunt-shell": "^1.1.1",
    "jasmine-focused": "^1.0.5"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "readme": "# Electron Installer Grunt Plugin\n\n[![Build status](https://ci.appveyor.com/api/projects/status/yd1ybqg3eq397i26/branch/master?svg=true)](https://ci.appveyor.com/project/kevinsawicki/grunt-electron-installer/branch/master)\n\nGrunt plugin that builds Windows installers for\n[Electron](https://github.com/atom/electron) apps using\n[Squirrel](https://github.com/Squirrel/Squirrel.Windows).\n\n## Installing\n\n```sh\nnpm install --save-dev grunt-electron-installer\n```\n\n## Configuring\n\nIn your `Gruntfile.coffee` or `Gruntfile.js` add the following:\n\n```js\ngrunt.loadNpmTasks('grunt-electron-installer')\n```\n\nThen assuming you have an Electron app built at the given `appDirectory`,\nyou can configure the installer task like so:\n\n```js\n'create-windows-installer': {\n  appDirectory: '/tmp/build/my-app',\n  outputDirectory: '/tmp/build/installer',\n  authors: 'My App Inc.',\n  exe: 'myapp.exe'\n}\n```\n\nThen run `grunt create-windows-installer` and you will have an `.nupkg`, a\n`RELEASES` file, and a `.exe` installer file in the `outputDirectory` folder.\n\nThere are several configuration settings supported:\n\n| Config Name           | Required | Description |\n| --------------------- | -------- | ----------- |\n| `appDirectory`        | Yes      | The folder path of your Electron app |\n| `outputDirectory`     | No       | The folder path to create the `.exe` installer in. Defaults to the `installer` folder at the project root. |\n| `loadingGif`          | No       | The local path to a `.gif` file to display during install. |\n| `authors`             | Yes      | The authors value for the nuget package metadata. Defaults to the `author` field from your app's package.json file when unspecified. |\n| `owners`              | No       | The owners value for the nuget package metadata. Defaults to the `authors` field when unspecified. |\n| `exe`                 | No       | The name of your app's main `.exe` file. This uses the `name` field in your app's package.json file with an added `.exe` extension when unspecified. |\n| `description`         | No       | The description value for the nuget package metadata. Defaults to the `description` field from your app's package.json file when unspecified. |\n| `version`             | No       | The version value for the nuget package metadata. Defaults to the `version` field from your app's package.json file when unspecified. |\n| `title`               | No       | The title value for the nuget package metadata. Defaults to the `productName` field and then the `name` field from your app's package.json file when unspecified. |\n| `certificateFile`     | No       | The path to an Authenticode Code Signing Certificate |\n| `certificatePassword` | No       | The password to decrypt the certificate given in `certificateFile` |\n| `signWithParams`      | No       | Params to pass to signtool.  Overrides `certificateFile` and `certificatePassword`. |\n| `setupIcon`           | No       | The ICO file to use as the icon for the generated Setup.exe |\n| `remoteReleases`      | No       | A URL to your existing updates. If given, these will be downloaded to create delta updates |\n\n## Sign your installer or else bad things will happen\n\nFor development / internal use, creating installers without a signature is okay, but for a production app you need to sign your application. Internet Explorer's SmartScreen filter will block your app from being downloaded, and many anti-virus vendors will consider your app as malware unless you obtain a valid cert.\n\nAny certificate valid for \"Authenticode Code Signing\" will work here, but if you get the right kind of code certificate, you can also opt-in to [Windows Error Reporting](http://en.wikipedia.org/wiki/Windows_Error_Reporting). [This MSDN page](http://msdn.microsoft.com/en-us/library/windows/hardware/hh801887.aspx) has the latest links on where to get a WER-compatible certificate. The \"Standard Code Signing\" certificate is sufficient for this purpose.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/atom/grunt-electron-installer/issues"
  },
  "_id": "grunt-electron-installer@0.31.0",
  "_from": "grunt-electron-installer@"
}
